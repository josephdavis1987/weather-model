---
title: "03 – Model Baselines with Prophet"
format: html
jupyter: python3
---

## 1. Set Up and Load Data
```{python}
import prophet
from prophet import Prophet


import pandas as pd
print(f"Pandas version: {pd.__version__}")
from pathlib import Path

print(f"Prophet version: {prophet.__version__}")

# 1a) Define project root and data paths
project_root = Path().resolve().parent
train_path   = project_root / "data" / "weather_train.parquet"

# 1b) Load the training data
train = pd.read_parquet(train_path, engine='fastparquet')

# 1c) Select a single location for simplicity
city = "Chattanooga"  # change to your city

df_train = (
    train[train["location"] == city]
         .sort_values("date")
         .reset_index(drop=True)
)

print(f"Loaded {df_train.shape[0]} rows for {city}")
df_train.head()

```

```{python}
import plotly.express as px

fig = px.line(
    df_train,
    x="date",
    y=["t2m_max"],
)
fig.update_layout(height=600)
fig.show()

```


## 2. Prepare Prophet Input
```{python}

# Ensure 'date' is a datetime (place at the top of ## 2)
if not pd.api.types.is_datetime64_any_dtype(df_train["date"]):
    df_train["date"] = pd.to_datetime(df_train["date"])

# Prophet expects columns 'ds' (date) and 'y' (value to forecast)
prophet_df = (
    df_train[["date", "t2m_max"]]
    .rename(columns={"date": "ds", "t2m_max": "y"})
)
prophet_df.head()

```

```{python}
import plotly.express as px

fig = px.line(
    prophet_df,
    x="ds",
    y=["y"],
)
fig.update_layout(height=600)
fig.show()
```

```{python}
print("\n--- Prophet DataFrame Info ---")
prophet_df.info()
print("\n--- Duplicate Timestamps Check ---")
print(prophet_df["ds"].duplicated().sum())
```

## 3. Fit a Vanilla Prophet Model
```{python}
from prophet import Prophet

# 3a) Instantiate Prophet with default seasonality
m = Prophet(
    yearly_seasonality=True,
    weekly_seasonality=False,
    daily_seasonality=False
)

# 3b) Fit to the historical data
m.fit(prophet_df)

```

## 4. Forecast Two Years Ahead

```{python}
# 4a) Create a future dataframe extending 730 days (≈2 years), including history
future = m.make_future_dataframe(periods=365*2, freq="D")

# 4b) Generate the forecast once (contains both in-sample and future)
df_forecast = m.predict(future)

# 4c) Inspect the in-sample head and forecast tail:
print("-- In-sample --")
df_forecast[ ["ds", "yhat", "yhat_lower", "yhat_upper"] ].head()

#print("-- Forecast (2-year) --")
#df_forecast[ ["ds", "yhat", "yhat_lower", "yhat_upper"] ].tail()

```

```{python}
from prophet.plot import plot_plotly  # For interactive plots
fig = plot_plotly(m, df_forecast)
fig.show() #display the plot if interactive plot enabled in your notebook
```

## 5. Plot the Forecast
```{python}

import plotly.express as px

fig = px.line(
    df_forecast,
    x="ds",
    y=["yhat", "yhat_lower", "yhat_upper"],
    labels={"ds": "Date", "value": "Forecast"},
    title=f"Prophet 2-Year Forecast for {city}"
)
fig.update_layout(height=600)
fig.show()

```