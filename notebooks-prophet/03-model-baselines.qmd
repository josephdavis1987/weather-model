---
title: "03 – Model Baselines with Prophet"
format: html
jupyter: python3
---

## 1. Load Train/Test Data & Pick City
```{python}
import pandas as pd
from pathlib import Path

project_root = Path().resolve().parent
train = pd.read_parquet(project_root/"data"/"weather_train.parquet")
test  = pd.read_parquet(project_root/"data"/"weather_test.parquet")

# ─── Select your city here ─────────────────────────
city = "Chattanooga"

df_train = (
    train[train["location"] == city]
    .sort_values("date")
    .reset_index(drop=True)
)
df_test = (
    test[test["location"] == city]
    .sort_values("date")
    .reset_index(drop=True)
)

print(f"Training on {city}: {df_train.shape[0]} rows")
print(f"Testing  on {city}: {df_test.shape[0]} rows")

```

## 2. Baseline A: Persistence (“yₜ = yₜ₋₁”)
```{python}
import numpy as np

last_train = df_train["t2m_max"].iat[-1]

df_test["pred_persist"] = (
    df_test["t2m_max"]
    .shift(1)
    .fillna(last_train)
)

df_test[["date","t2m_max","pred_persist"]].head()

```

## 2.5 Print out all seasonal columns 
```{python}
print("Seasonal columns in test:", 
      [c for c in df_test.columns if c.endswith("_seasonal_avg")])
```

## 3. Baseline B: Seasonal Average
```{python}
# Already computed in your FE step as t2m_max_seasonal_avg
df_test["pred_seasonal"] = df_test["t2m_max_seasonal_avg"]

#df_test[["date","t2m_max","pred_seasonal"]].head()
df_test.head(20)
```

## 4. Baseline C: Prophet with All Features
```{python}
from prophet import Prophet

# 4a) Identify all regressors (everything except ds/y)
exclude = {"date","location","t2m_max","sample"}
regressors = [c for c in df_train.columns if c not in exclude]

# 4b) Instantiate & add each regressor
m = Prophet(
    yearly_seasonality=True,
    weekly_seasonality=True,
    daily_seasonality=False
)
for r in regressors:
    m.add_regressor(r)

# 4c) Build the DataFrame Prophet expects
prophet_df = (
    df_train[["date","t2m_max"] + regressors]
    .rename(columns={"date":"ds","t2m_max":"y"})
)

# 4d) Fit
m.fit(prophet_df)

# 4e) Construct future frame directly from test set
future = (
    df_test[["date"] + regressors]
    .rename(columns={"date":"ds"})
)

forecast = m.predict(future)

# 4f) Align & store
df_test["pred_prophet"] = forecast["yhat"].values
df_test[["date","t2m_max","pred_prophet"]].head()


```

## 5. Evaluate & Compare (fixed for older sklearn)
```{python}
import numpy as np
from sklearn.metrics import mean_squared_error

# fallback for older sklearn
try:
    from sklearn.metrics import mean_absolute_percentage_error as _mape
except ImportError:
    _mape = None

def summarize(name, y_true, y_pred):
    mse  = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    if _mape is not None:
        mape = _mape(y_true, y_pred)
    else:
        mask = (y_true != 0)
        mape = np.mean(np.abs((y_true[mask]-y_pred[mask])/y_true[mask]))
    print(f"{name:12s} → RMSE: {rmse:6.3f}, MAPE: {mape:6.3%}")

Y = df_test["t2m_max"].values
summarize("Persistence",  Y, df_test["pred_persist"].values)
summarize("SeasonalAvg",  Y, df_test["pred_seasonal"].values)
summarize("Prophet",      Y, df_test["pred_prophet"].values)


```

## 6. Visual Comparison

```{python}

import plotly.express as px

plot_df = df_test.melt(
    id_vars="date",
    value_vars=["t2m_max","pred_persist","pred_seasonal","pred_prophet"],
    var_name="series",
    value_name="T2M_Max"
)

fig = px.line(
    plot_df,
    x="date",
    y="T2M_Max",
    color="series",
    title=f"{city}: True vs Baseline Forecasts"
)
fig.update_layout(height=500)
fig.show()


```

