---
title: "03.01 – XGBoost Baseline by City"
format: html
jupyter: python3
---

```{python}
# | message: false
# 0  Imports ---------------------------------------------------------------
from pathlib import Path
import duckdb, pandas as pd, numpy as np
from xgboost import XGBRegressor
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import plotly.io as pio
pio.renderers.default = "notebook"  # or "vscode", "browser", etc.

```

```{python}

# 1  Parameters -------------------------------------------------------------
city            = "Chattanooga"   # <— change as needed
forecast_horizon = 365 * 2        # days into the future

project_root = Path().resolve().parent
db_path      = project_root / "weather.duckdb"

assert db_path.exists(), f"{db_path} not found"
print(f"DB   → {db_path}\nCity → {city}")

```


```{python}

# 2  Pull raw data ----------------------------------------------------------
sql = """
SELECT
    date       :: DATE AS date,
    t2m_max           AS t2m_max
FROM weather
WHERE location = ?
ORDER BY date
"""
with duckdb.connect(str(db_path)) as con:
    df_raw = con.execute(sql, [city]).fetchdf()

print(f"{len(df_raw):,} rows pulled")
df_raw.tail()

```

```{python}

# 2.5  Scrub sentinel missing values (-999) -------------------------------
sentinel = -999.0
mask     = df_raw["t2m_max"] == sentinel

print(f"Found {(mask).sum():,} sentinel rows (t2m_max == {sentinel}). Dropping them.")
df_raw.loc[mask, "t2m_max"] = np.nan
df_raw = df_raw.dropna(subset=["t2m_max"]).reset_index(drop=True)

```

```{python}

# 3  Feature engineering ----------------------------------------------------
df = df_raw.copy()
df["date"]       = pd.to_datetime(df["date"])
df["ordinal"]    = (df["date"] - df["date"].min()).dt.days
df["doy"]        = df["date"].dt.dayofyear

# Harmonic terms for annual seasonality (1st harmonic)
df["doy_sin"] = np.sin(2 * np.pi * df["doy"] / 365.25)
df["doy_cos"] = np.cos(2 * np.pi * df["doy"] / 365.25)

features   = ["ordinal", "doy_sin", "doy_cos"]
target     = "t2m_max"

X_train, y_train = df[features], df[target]

```

```{python}

# 4  Train XGBoost ----------------------------------------------------------
model = XGBRegressor(
    objective="reg:squarederror",
    n_estimators=500,
    learning_rate=0.05,
    max_depth=5,
    subsample=0.8,
    colsample_bytree=0.8,
    random_state=42,
)
model.fit(X_train, y_train)

```


```{python}

# 5  Build future dataframe & predict --------------------------------------
last_date = df["date"].max()
future_dates = pd.date_range(
    start=last_date + pd.Timedelta(days=1),
    periods=forecast_horizon,
    freq="D"
)

future = pd.DataFrame({
    "date": future_dates,
})
future["ordinal"] = (future["date"] - df["date"].min()).dt.days
future["doy"]     = future["date"].dt.dayofyear
future["doy_sin"] = np.sin(2 * np.pi * future["doy"] / 365.25)
future["doy_cos"] = np.cos(2 * np.pi * future["doy"] / 365.25)

# Predict
future["yhat"] = model.predict(future[features])

forecast_full = pd.concat(
    [df.assign(yhat=np.nan), future], ignore_index=True
)

```


```{python}

# 6  Plot ① – quick Matplotlib ---------------------------------------------
fig, ax = plt.subplots(figsize=(14, 6))
ax.plot(df["date"], y_train, label="Historical", lw=1)
ax.plot(future["date"], future["yhat"], label="Forecast", lw=2)
ax.set(title=f"{city} – XGBoost forecast (+{forecast_horizon//365} yrs)",
       xlabel="Date", ylabel="t2m_max (°C)")
ax.legend(); fig.tight_layout()

```


```{python}

# 7  Plot ② – interactive Plotly -------------------------------------------
hist = go.Scatter(
    x=df["date"], y=df["t2m_max"],
    mode="markers", name="Historical",
    marker=dict(size=4, opacity=0.6)
)
fc   = go.Scatter(
    x=future["date"], y=future["yhat"],
    mode="lines", name="Forecast", line=dict(width=2)
)

fig2 = go.Figure([hist, fc])
fig2.update_layout(
    title       = f"{city}: t2m_max – history & 2-yr XGBoost forecast",
    xaxis_title = "Date",
    yaxis_title = "t2m_max (°C)",
    hovermode   = "x unified",
    template    = "plotly_white"
)
fig2

```

