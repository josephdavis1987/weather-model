---
title: "03.50 – XGBoost Baseline by City (Multi-Day Forecasts with Enhanced Features)"
format: html
jupyter: python3
----------------

## 0. Parameters

```{python}
from pathlib import Path

# ─── Editable parameters ─────────────────────────────────────────────
city        = "Chattanooga"      # which city to model
train_start = "2015-01-01"       # inclusive
train_end   = "2022-12-31"       # inclusive
test_start  = "2023-01-01"       # inclusive
test_end    = "2023-12-31"       # inclusive
forecast_horizon = None          # not used; we forecast exactly test range

# ─── Internal paths ─────────────────────────────────────────────────
project_root = Path().resolve().parent
db_path      = project_root / "weather.duckdb"

assert db_path.exists(), f"DuckDB not found at {db_path}"
print(f"DB path:       {db_path}")
print(f"City:          {city}")
print(f"Train window:  {train_start} → {train_end}")
print(f"Test window:   {test_start} → {test_end}")
```


## 1. Load & Clean Data

```{python}
import duckdb
import pandas as pd

# 1a) Query raw columns from DuckDB
query = f"""
SELECT
  date,
  t2m,
  t2m_max,
  t2m_min,
  t2m_range,
  dewpoint,
  rh2m,
  ws10m,
  wd10m,
  ps,
  allsky_sw_dwn,
  allsky_lw_dwn,
  prectotcorr
FROM weather
WHERE location = '{city}'
  AND date BETWEEN '{train_start}' AND '{test_end}'
ORDER BY date
"""
df = duckdb.connect(str(db_path)).execute(query).fetchdf()

# 1b) Convert and drop sentinel
numeric_cols = [
    "t2m","t2m_max","t2m_min","t2m_range","dewpoint","rh2m","ws10m",
    "wd10m","ps","allsky_sw_dwn","allsky_lw_dwn","prectotcorr"
]
df["date"] = pd.to_datetime(df["date"])
df = df[(df[numeric_cols]!= -999).all(axis=1)]

print(f"After cleaning: {df.shape[0]} rows")
df.head()
```

## 2. Feature Engineering

```{python}
import numpy as np

# 2a) Date to numeric
df["date_ordinal"] = df["date"].map(pd.Timestamp.toordinal)

# 2b) Day-of-year and seasonal transform
df["day_of_year"] = df["date"].dt.dayofyear
df["doy_sin"] = np.sin(2 * np.pi * df["day_of_year"] / 365)
df["doy_cos"] = np.cos(2 * np.pi * df["day_of_year"] / 365)

# --- NEW: Additional Calculable Features ---
# 1. Ratio of mean temp to min temp
# Handle potential division by zero by replacing inf with NaN, dropna will then handle
df['t2m_ratio_to_t2m_min'] = df['t2m'] / df['t2m_min']
df.replace([np.inf, -np.inf], np.nan, inplace=True) # Replace inf with NaN

# 2. Temperature-Dewpoint Spread
df['t2m_dewpoint_spread'] = df['t2m'] - df['dewpoint']

# 3. Daily Mean Temperature from Max/Min
df['t2m_avg_from_max_min'] = (df['t2m_max'] + df['t2m_min']) / 2

# 4. Pressure Change / Tendency (24-hour difference)
# This script is for a single city, so groupby('location') isn't needed here
# but if it were multi-city, it would be df.groupby('location')['ps'].diff()
df['ps_change_24hr'] = df['ps'].diff(periods=1)

# 5. Wind Components (U and V)
# Assuming wd10m is in degrees; convert to radians for sin/cos
df['wind_u'] = df['ws10m'] * np.sin(np.radians(df['wd10m']))
df['wind_v'] = df['ws10m'] * np.cos(np.radians(df['wd10m']))

# 6. Normalized Daily Temperature Range
# Handle potential division by zero by replacing inf with NaN
df['t2m_range_normalized'] = df['t2m_range'] / df['t2m']
df.replace([np.inf, -np.inf], np.nan, inplace=True)


# --- MODIFIED: Target and Features for multiple forecast horizons ---
# Change target to t2m instead of t2m_max
df["t2m_1_day_later"] = df["t2m"].shift(-1)
df["t2m_3_days_later"] = df["t2m"].shift(-3)
df["t2m_5_days_later"] = df["t2m"].shift(-5)

# MODIFIED: Added all new calculable features to feature_cols
feature_cols = [
    "date_ordinal",
    "day_of_year",
    "doy_sin",
    "doy_cos",
    "t2m",
    "t2m_min",
    "t2m_max",
    "t2m_range",
    "dewpoint",
    "rh2m",
    "ws10m",
    "wd10m",
    "ps",
    "allsky_sw_dwn",
    "allsky_lw_dwn",
    "prectotcorr",
    "t2m_ratio_to_t2m_min",    # New feature
    "t2m_dewpoint_spread",     # New feature
    "t2m_avg_from_max_min",    # New feature
    "ps_change_24hr",          # New feature
    "wind_u",                  # New feature
    "wind_v",                  # New feature
    "t2m_range_normalized"     # New feature
]

# MODIFIED: Target columns are now based on t2m
target_cols = [
    "t2m_1_day_later",
    "t2m_3_days_later",
    "t2m_5_days_later"
]

# --- Handle NaNs from shifting targets and new calculations ---
# Add new calculated features that might introduce NaNs (e.g., from .diff() or division)
# The .diff(1) for ps_change_24hr introduces 1 NaN at the beginning.
# The ratios might introduce NaNs if denominator is 0.
all_cols_to_check_for_nan = target_cols + [
    "t2m_ratio_to_t2m_min",
    "t2m_dewpoint_spread",
    "t2m_avg_from_max_min",
    "ps_change_24hr",
    "wind_u",
    "wind_v",
    "t2m_range_normalized"
]

original_rows = df.shape[0]
df.dropna(subset=all_cols_to_check_for_nan, inplace=True)
print(f"Dropped {original_rows - df.shape[0]} rows due to NaNs from shifting targets and new calculations.")

print("Features:", feature_cols)
print("Targets: ", target_cols)
df.tail()
```

## 3. Train/Test Split

```{python}
# 3a) Boolean masks
mask_train = (df["date"] >= train_start) & (df["date"] <= train_end)
mask_test  = (df["date"] >= test_start)  & (df["date"] <= test_end)

train_df = df[mask_train].reset_index(drop=True)
test_df  = df[mask_test].reset_index(drop=True)

print("Train rows:", train_df.shape[0])
print("Test rows: ", test_df.shape[0])
```

## 4. Train XGBoost Model

```{python}
from xgboost import XGBRegressor

models = {}
for target_col in target_cols:
    print(f"\nTraining model for: {target_col}")
    # 4a) Prepare arrays
    iX_train = train_df[feature_cols]
    iy_train = train_df[target_col]

    # 4b) Instantiate & fit
    model = XGBRegressor(
        n_estimators=100,
        learning_rate=0.1,
        random_state=0
    )
    model.fit(iX_train, iy_train)
    models[target_col] = model
    print(f"Model for {target_col} training complete.")

print("\nAll models trained.")
```

## 5. Forecast & Evaluate

```{python}
from sklearn.metrics import mean_squared_error, mean_absolute_error
import numpy as np

df_eval = pd.DataFrame({"date": test_df["date"]})

for target_col in target_cols:
    X_test = test_df[feature_cols]
    y_true = test_df[target_col]
    y_pred = models[target_col].predict(X_test)

    df_eval[f"y_true_{target_col}"] = y_true
    df_eval[f"y_pred_{target_col}"] = y_pred

    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    mae  = mean_absolute_error(y_true, y_pred)
    print(f"\nMetrics for {target_col}:")
    print(f"  RMSE: {rmse:.3f}, MAE: {mae:.3f}")

df_eval.head()
```

## 6.0 Plot Results (All Series)

```{python}
import plotly.express as px
import pandas as pd

# Define plotting colors
base_blue_1 = "#007BFF" # Darker blue for 1-day
base_blue_3 = "#66B2FF" # Medium blue for 3-day
base_blue_5 = "#ADD8FF" # Lighter blue for 5-day

plot_df_list = []

# Add Actual (Today's Mean Temp) for comparison - this is the unshifted, raw t2m
plot_df_list.append(
    df[["date", "t2m"]].assign(series="Actual (Today's Mean Temp)")
    .rename(columns={"t2m": "temperature"})
)

# Process training data
for target_col in target_cols:
    horizon_name = target_col.replace('t2m_', '').replace('_later', ' day(s)')
    plot_df_list.append(
        train_df[["date", target_col]].assign(
            series=f"Train (t2m_{horizon_name})"
        ).rename(columns={target_col: "temperature"})
    )

# Process test data (Actuals and Predictions)
for target_col in target_cols:
    horizon_name = target_col.replace('t2m_', '').replace('_later', ' day(s)')
    
    # Test Actual
    plot_df_list.append(
        df_eval[["date", f"y_true_{target_col}"]].assign(
            series=f"Test Actual ({horizon_name})"
        ).rename(columns={f"y_true_{target_col}": "temperature"})
    )
    
    # Test Prediction
    plot_df_list.append(
        df_eval[["date", f"y_pred_{target_col}"]].assign(
            series=f"Test Pred ({horizon_name})"
        ).rename(columns={f"y_pred_{target_col}": "temperature"})
    )

plot_df = pd.concat(plot_df_list, ignore_index=True)


# Define color map for all series
# Using shades for similar types, and distinct for prediction horizons
color_map = {
    "Actual (Today's Mean Temp)": "black",

    # Train Data (slightly muted versions of test colors)
    "Train (t2m_1 day(s))": "#7a9cb2",
    "Train (t2m_3 day(s))": "#a0b7c7",
    "Train (t2m_5 day(s))": "#c5d2db",

    # Test Actuals
    "Test Actual (1 day(s))": base_blue_1,
    "Test Actual (3 day(s))": base_blue_3,
    "Test Actual (5 day(s))": base_blue_5,

    # Test Predictions (distinct, lighter shades)
    "Test Pred (1 day(s))": "#3399FF",
    "Test Pred (3 day(s))": "#99CCFF",
    "Test Pred (5 day(s))": "#CCEEFF",
}

line_dash_map = {
    "Actual (Today's Mean Temp)": "solid",
    "Train (t2m_1 day(s))": "dot",
    "Train (t2m_3 day(s))": "dot",
    "Train (t2m_5 day(s))": "dot",
    "Test Actual (1 day(s))": "solid",
    "Test Actual (3 day(s))": "solid",
    "Test Actual (5 day(s))": "solid",
    "Test Pred (1 day(s))": "dash",
    "Test Pred (3 day(s))": "dash",
    "Test Pred (5 day(s))": "dash",
}

fig = px.line(
    plot_df,
    x="date",
    y="temperature",
    color="series",
    title=f"XGBoost Baseline for {city} - Multi-Day Forecasts (Target: T2M)",
    template="plotly_white",
    color_discrete_map=color_map,
    line_dash_map=line_dash_map
)
fig.update_layout(height=600, xaxis_title="Date", yaxis_title="T2M Mean Temp (°C)")
fig.show()
```

# 6.1 plot differences

```{python}
import plotly.express as px
import pandas as pd

plot_error_df_list = []

for target_col in target_cols:
    horizon_name = target_col.replace('t2m_', '').replace('_later', ' day(s)')
    
    # Calculate the error: Test Actual - Test Prediction
    error_col = f"error_{horizon_name}"
    df_eval[error_col] = df_eval[f"y_true_{target_col}"] - df_eval[f"y_pred_{target_col}"]
    
    plot_error_df_list.append(
        df_eval[["date", error_col]].assign(
            series=f"Error ({horizon_name})"
        ).rename(columns={error_col: "error"}) # Standardize column name to 'error'
    )

plot_error_df = pd.concat(plot_error_df_list, ignore_index=True)

# Define distinct colors for the error lines
error_color_map = {
    "Error (1 day(s))": "blue",
    "Error (3 day(s))": "green",
    "Error (5 day(s))": "red",
}

fig_error = px.line(
    plot_error_df,
    x="date",
    y="error",
    color="series",
    title=f"Forecast Error for {city} by Horizon (Test Set - Target: T2M)",
    labels={"error": "Prediction Error (°C)", "date": "Date"}, # Customize labels
    template="plotly_white",
    color_discrete_map=error_color_map
)

# Add a horizontal line at y=0 to easily visualize positive vs. negative errors
fig_error.add_hline(y=0, line_dash="dash", line_color="grey", annotation_text="Zero Error")

fig_error.update_layout(height=600)
fig_error.show()
```

## 6.2 Feature Importance

```{python}
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Choose the model for which you want to display feature importance
# Note: target_cols[0] is now "t2m_1_day_later"
model_1day_forecast = models[target_cols[0]]

# Get feature importances
feature_importances = model_1day_forecast.feature_importances_

# Create a DataFrame for better visualization and sorting
importance_df = pd.DataFrame({
    'Feature': feature_cols,
    'Importance': feature_importances
})

# Sort features by importance in descending order
importance_df = importance_df.sort_values(by='Importance', ascending=False)

print(f"Feature Importances for {target_cols[0]} Model (Target: T2M):")
print(importance_df.head(20))

# Plotting the top N feature importances
plt.figure(figsize=(12, 8))
sns.barplot(x='Importance', y='Feature', data=importance_df.head(20), palette='viridis')
plt.title(f'Top 20 Feature Importances for {target_cols[0]} Model (Target: T2M)')
plt.xlabel('Importance (F-score or Gain)')
plt.ylabel('Feature')
plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# You can repeat this for other models (3-day and 5-day) if desired
# model_3day_forecast = models[target_cols[1]] # e.g., for 3-day
# model_5day_forecast = models[target_cols[2]] # e.g., for 5-day
# ... and generate importance_df and plots for them