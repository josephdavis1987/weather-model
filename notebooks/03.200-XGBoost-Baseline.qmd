---
title: "03.10 – XGBoost Baseline by City (Multi-Day Forecasts)"
format: html
jupyter: python3
----------------

## 0. Parameters

```{python}
from pathlib import Path

# ─── Editable parameters ─────────────────────────────────────────────
city        = "Chattanooga"      # which city to model
train_start = "2015-01-01"       # inclusive
train_end   = "2022-12-31"       # inclusive
test_start  = "2023-01-01"       # inclusive
test_end    = "2023-12-31"       # inclusive
forecast_horizon = None          # not used; we forecast exactly test range

# ─── Internal paths ─────────────────────────────────────────────────
project_root = Path().resolve().parent
db_path      = project_root / "weather.duckdb"

assert db_path.exists(), f"DuckDB not found at {db_path}"
print(f"DB path:       {db_path}")
print(f"City:          {city}")
print(f"Train window:  {train_start} → {train_end}")
print(f"Test window:   {test_start} → {test_end}")

```


## 1. Load & Clean Data

```{python}
import duckdb
import pandas as pd

# 1a) Query raw columns from DuckDB
query = f"""
SELECT
  date,
  t2m,
  t2m_max,
  t2m_min
FROM weather
WHERE location = '{city}'
  AND date BETWEEN '{train_start}' AND '{test_end}'
ORDER BY date
"""
df = duckdb.connect(str(db_path)).execute(query).fetchdf()

# 1b) Convert and drop sentinel
df["date"] = pd.to_datetime(df["date"])
df = df[(df[["t2m","t2m_max","t2m_min"]]!= -999).all(axis=1)]

print(f"After cleaning: {df.shape[0]} rows")
df.head()
```

## 2. Feature Engineering

```{python}
import numpy as np

# 2a) Date to numeric
df["date_ordinal"] = df["date"].map(pd.Timestamp.toordinal)

# 2b) Day-of-year and seasonal transform
df["day_of_year"] = df["date"].dt.dayofyear
# encode annual seasonality
df["doy_sin"] = np.sin(2 * np.pi * df["day_of_year"] / 365)
df["doy_cos"] = np.cos(2 * np.pi * df["day_of_year"] / 365)

# --- MODIFIED: Target and Features for multiple forecast horizons ---
# Create target columns for 1, 3, and 5 days later
df["t2m_max_1_day_later"] = df["t2m_max"].shift(-1)
df["t2m_max_3_days_later"] = df["t2m_max"].shift(-3)
df["t2m_max_5_days_later"] = df["t2m_max"].shift(-5)

# Features will be TODAY's (unlagged) values, plus the time-based features for TODAY
feature_cols = [
    "date_ordinal",
    "day_of_year",
    "doy_sin",
    "doy_cos",
    "t2m",          # Today's mean temp
    "t2m_min",      # Today's min temp
    "t2m_max"       # Today's max temp
]

target_cols = [
    "t2m_max_1_day_later",
    "t2m_max_3_days_later",
    "t2m_max_5_days_later"
]

# --- NEW: Handle NaNs from shifting the targets ---
# Drop rows with NaN in any of the new target columns.
# This ensures we only train on complete sets of target values.
original_rows = df.shape[0]
df.dropna(subset=target_cols, inplace=True)
print(f"Dropped {original_rows - df.shape[0]} rows due to NaNs from shifting targets.")

print("Features:", feature_cols)
print("Targets: ", target_cols)
df.tail()
```

## 3. Train/Test Split

```{python}
# 3a) Boolean masks
mask_train = (df["date"] >= train_start) & (df["date"] <= train_end)
mask_test  = (df["date"] >= test_start)  & (df["date"] <= test_end)

train_df = df[mask_train].reset_index(drop=True)
test_df  = df[mask_test].reset_index(drop=True)

print("Train rows:", train_df.shape[0])
print("Test rows: ", test_df.shape[0])
```

## 4. Train XGBoost Model

```{python}
from xgboost import XGBRegressor

models = {}
for target_col in target_cols:
    print(f"\nTraining model for: {target_col}")
    # 4a) Prepare arrays
    iX_train = train_df[feature_cols]
    iy_train = train_df[target_col]

    # 4b) Instantiate & fit
    model = XGBRegressor(
        n_estimators=100,
        learning_rate=0.1,
        random_state=0
    )
    model.fit(iX_train, iy_train)
    models[target_col] = model
    print(f"Model for {target_col} training complete.")

print("\nAll models trained.")
```

## 5. Forecast & Evaluate

```{python}
from sklearn.metrics import mean_squared_error, mean_absolute_error
import numpy as np

df_eval = pd.DataFrame({"date": test_df["date"]})

for target_col in target_cols:
    X_test = test_df[feature_cols]
    y_true = test_df[target_col]
    y_pred = models[target_col].predict(X_test)

    df_eval[f"y_true_{target_col}"] = y_true
    df_eval[f"y_pred_{target_col}"] = y_pred

    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    mae  = mean_absolute_error(y_true, y_pred)
    print(f"\nMetrics for {target_col}:")
    print(f"  RMSE: {rmse:.3f}, MAE: {mae:.3f}")

df_eval.head()
```

## 6. Plot Results

```{python}
import plotly.express as px
import pandas as pd

plot_df_list = []

# Add Actual (Today's Max) for comparison - this is the unshifted, raw t2m_max
plot_df_list.append(
    df[["date", "t2m_max"]].assign(series="Actual (Today's Max)", type="Actual_Today")
    .rename(columns={"t2m_max": "temperature"}) # Standardize column name
)

# Process only the specific test actual and prediction series we want to plot
for target_col in target_cols:
    horizon_name = target_col.replace('t2m_max_', '').replace('_later', '')
    
    if horizon_name == "1 day": # Keep Test Actual for 1 day out
        plot_df_list.append(
            df_eval[["date", f"y_true_{target_col}"]].assign(
                series=f"Test Actual ({horizon_name})",
                type=f"Test_Actual_{horizon_name}"
            ).rename(columns={f"y_true_{target_col}": "temperature"}) # Standardize column name
        )
    
    # Always include the Test Prediction for all horizons
    plot_df_list.append(
        df_eval[["date", f"y_pred_{target_col}"]].assign(
            series=f"Test Pred ({horizon_name})",
            type=f"Test_Pred_{horizon_name}"
        ).rename(columns={f"y_pred_{target_col}": "temperature"}) # Standardize column name
    )

plot_df = pd.concat(plot_df_list, ignore_index=True)


# Define a more robust color scale and line dash map
# Base color for 1-day (darker), then progressively lighter for 3 and 5 days
base_blue_1 = "#007BFF" # Darker blue for 1-day
base_blue_3 = "#66B2FF" # Medium blue for 3-day
base_blue_5 = "#ADD8FF" # Lighter blue for 5-day

color_map = {
    "Actual (Today's Max)": "black",

    # 1-day forecast
    "Test Actual (1 day)": base_blue_1,
    "Test Pred (1 day)": "#3399FF", # Slightly lighter than base_blue_1

    # 3-day forecast
    "Test Pred (3 days)": "#99CCFF", # Slightly lighter than base_blue_3

    # 5-day forecast
    "Test Pred (5 days)": "#CCEEFF", # Slightly lighter than base_blue_5
}

line_dash_map = {
    "Actual (Today's Max)": "solid",
    "Test Actual (1 day)": "solid",
    "Test Pred (1 day)": "dot", # Predictions as dots
    "Test Pred (3 days)": "dot",
    "Test Pred (5 days)": "dot",
}

fig = px.line(
    plot_df,
    x="date",
    y="temperature", # Use the standardized 'temperature' column
    color="series",
    title=f"XGBoost Baseline for {city} - Multi-Day Forecasts",
    template="plotly_white",
    color_discrete_map=color_map,
    line_dash_map=line_dash_map
)
fig.update_layout(
height=500,
xaxis_title="Date", yaxis_title="T2M max (°C)")
fig.show()
```