---
title: "03.10 – XGBoost Baseline by City"
format: html
jupyter: python3
----------------

## 0. Parameters

```{python}
from pathlib import Path

# ─── Editable parameters ─────────────────────────────────────────────
city        = "Chattanooga"      # which city to model
train_start = "2015-01-01"       # inclusive
train_end   = "2022-12-31"       # inclusive
test_start  = "2023-01-01"       # inclusive
test_end    = "2023-12-31"       # inclusive
forecast_horizon = None          # not used; we forecast exactly test range

# ─── Internal paths ─────────────────────────────────────────────────
project_root = Path().resolve().parent
db_path      = project_root / "weather.duckdb"

assert db_path.exists(), f"DuckDB not found at {db_path}"
print(f"DB path:       {db_path}")
print(f"City:          {city}")
print(f"Train window:  {train_start} → {train_end}")
print(f"Test window:   {test_start} → {test_end}")
```


## 1. Load & Clean Data

```{python}
import duckdb
import pandas as pd

# 1a) Query raw columns from DuckDB
query = f"""
SELECT
  date,
  t2m,
  t2m_max,
  t2m_min
FROM weather
WHERE location = '{city}'
  AND date BETWEEN '{train_start}' AND '{test_end}'
ORDER BY date
"""
df = duckdb.connect(str(db_path)).execute(query).fetchdf()

# 1b) Convert and drop sentinel
df["date"] = pd.to_datetime(df["date"])
df = df[(df[["t2m","t2m_max","t2m_min"]]!= -999).all(axis=1)]

print(f"After cleaning: {df.shape[0]} rows")
df.head()
```

## 2. Feature Engineering

```{python}
import numpy as np

# 2a) Date to numeric
df["date_ordinal"] = df["date"].map(pd.Timestamp.toordinal)

# 2b) Day-of-year and seasonal transform
df["day_of_year"] = df["date"].dt.dayofyear
# encode annual seasonality
df["doy_sin"] = np.sin(2 * np.pi * df["day_of_year"] / 365)
df["doy_cos"] = np.cos(2 * np.pi * df["day_of_year"] / 365)

# --- MODIFIED: Target and Features for a 5-day forecast based on today's info ---
# The new target is t2m_max in 5 days
df["t2m_max_5_days_later"] = df["t2m_max"].shift(-5) # Changed from -1 to -5

# Features will be TODAY's (unlagged) values, plus the time-based features for the forecast day (5 days later)
feature_cols = [
    "date_ordinal", # Will represent the date_ordinal for 5 days later
    "day_of_year",  # Will represent the day_of_year for 5 days later
    "doy_sin",      # Will represent the doy_sin for 5 days later
    "doy_cos",      # Will represent the doy_cos for 5 days later
    "t2m",          # Today's mean temp
    "t2m_min",      # Today's min temp
    "t2m_max"       # Today's max temp
]
target_col = "t2m_max_5_days_later" # This is your new target

# --- NEW: Handle NaNs from shifting the target ---
# The last 5 rows of 't2m_max_5_days_later' will be NaN.
# Drop rows with NaN in the new target column.
original_rows = df.shape[0]
df.dropna(subset=[target_col], inplace=True)
print(f"Dropped {original_rows - df.shape[0]} rows due to NaNs from shifting target.")


print("Features:", feature_cols)
print("Target:  ", target_col)
df.tail()
```

## 3. Train/Test Split

```{python}
# 3a) Boolean masks
mask_train = (df["date"] >= train_start) & (df["date"] <= train_end)
mask_test  = (df["date"] >= test_start)  & (df["date"] <= test_end)

train_df = df[mask_train].reset_index(drop=True)
test_df  = df[mask_test].reset_index(drop=True)

print("Train rows:", train_df.shape[0])
print("Test rows: ", test_df.shape[0])
```

## 4. Train XGBoost Model

```{python}
from xgboost import XGBRegressor

# 4a) Prepare arrays
iX_train = train_df[feature_cols]
iy_train = train_df[target_col]

# 4b) Instantiate & fit
model = XGBRegressor(
    n_estimators=100,
    learning_rate=0.1,
    random_state=0
)
model.fit(iX_train, iy_train)

print("Model training complete.")
```

## 5. Forecast & Evaluate

```{python}
from sklearn.metrics import mean_squared_error, mean_absolute_error
import numpy as np

# 5a) Predict on test set
X_test = test_df[feature_cols]
y_true = test_df[target_col]
y_pred = model.predict(X_test)

df_eval = pd.DataFrame({
    "date":   test_df["date"],
    "y_true": y_true,
    "y_pred": y_pred
})

# 5b) Metrics
rmse = np.sqrt(mean_squared_error(y_true, y_pred))
mae  = mean_absolute_error(y_true, y_pred)
print(f"RMSE: {rmse:.3f}, MAE: {mae:.3f}")

df_eval.head()
```

## 6. Plot Results

```{python}
import plotly.express as px

# Combine train and eval for plotting
plot_df = pd.concat([
    train_df[["date", target_col]].assign(series="train"),
    df_eval.rename(columns={"y_true": target_col})
           .assign(series="test_actual")[["date", target_col, "series"]],
    df_eval.rename(columns={"y_pred": target_col})
           .assign(series="test_pred")[["date", target_col, "series"]]
], ignore_index=True)

fig = px.line(
    plot_df,
    x="date", y=target_col, color="series",
    title=f"XGBoost Baseline for {city}",
    template="plotly_white"
)
fig.update_layout(xaxis_title="Date", yaxis_title="T2M max (°C)")
fig.show()
```

---

*Let me know if you’d like to save the model object or export the plot!*
