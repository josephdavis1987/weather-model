---
title: "03.10 – XGBoost Baseline by City (Multi-City, Multi-Day Forecasts with Finalized Features)"
format: html
jupyter: python3
----------------

## 0. Parameters

```{python}
from pathlib import Path

# ─── Editable parameters ─────────────────────────────────────────────
# MODIFIED: No longer filtering by a single city for loading
city        = "Chattanooga"      # This will now just be for the plot title if needed
train_start = "2015-01-01"       # inclusive
train_end   = "2022-12-31"       # inclusive
test_start  = "2023-01-01"       # inclusive
test_end    = "2023-12-31"       # inclusive
forecast_horizon = None          # not used; we forecast exactly test range

# ─── Internal paths ─────────────────────────────────────────────────
project_root = Path().resolve().parent
db_path      = project_root / "weather.duckdb"

assert db_path.exists(), f"DuckDB not found at {db_path}"
print(f"DB path:       {db_path}")
# MODIFIED: Removed specific city print as we're loading all
print(f"Train window:  {train_start} → {train_end}")
print(f"Test window:   {test_start} → {test_end}")

```


## 1. Load & Clean Data

```{python}
import duckdb
import pandas as pd

# 1a) Query raw columns from DuckDB
# MODIFIED: Removed WHERE clause to load all locations
query = f"""
SELECT
  date,
  location, -- Include location as a column
  lat,      -- Include lat
  lon,      -- Include lon
  t2m,
  t2m_max,
  t2m_min,
  t2m_range,
  dewpoint,
  rh2m,
  ws10m,
  wd10m,
  ps,
  allsky_sw_dwn,
  allsky_lw_dwn,
  prectotcorr
FROM weather
WHERE date BETWEEN '{train_start}' AND '{test_end}' -- Apply date filter for all data
ORDER BY date, location -- Order by date AND location to keep groups together
"""
df = duckdb.connect(str(db_path)).execute(query).fetchdf()

# 1b) Convert and drop sentinel
# MODIFIED: Included lat, lon, and new weather columns in the sentinel value check
numeric_cols = [
    "t2m","t2m_max","t2m_min","t2m_range","dewpoint","rh2m","ws10m",
    "wd10m","ps","allsky_sw_dwn","allsky_lw_dwn","prectotcorr",
    "lat", "lon" # Add lat/lon to numeric cleaning
]
df["date"] = pd.to_datetime(df["date"])
df = df[(df[numeric_cols]!= -999).all(axis=1)]

print(f"After initial cleaning: {df.shape[0]} rows")
print(f"Number of unique locations: {df['location'].nunique()}")
df.head()

```

## 2. Feature Engineering

```{python}
import numpy as np

# 2a) Date to numeric
df["date_ordinal"] = df["date"].map(pd.Timestamp.toordinal)

# 2b) Day-of-year and seasonal transform
df["day_of_year"] = df["date"].dt.dayofyear
df["doy_sin"] = np.sin(2 * np.pi * df["day_of_year"] / 365)
df["doy_cos"] = np.cos(2 * np.pi * df["day_of_year"] / 365)

# --- NEW: One-Hot Encode 'location' ---
# This creates new columns like 'location_Chattanooga', 'location_Nashville', etc.
df = pd.get_dummies(df, columns=['location'], prefix='location', dtype=int)


# --- Target and Features for multiple forecast horizons ---
# Create target columns for 1, 3, and 5 days later
# IMPORTANT: These shifts need to be done *within each location group*
# Otherwise, shifting will incorrectly pull data from a different city.
df['t2m_max_1_day_later'] = df.groupby('location_Chattanooga')['t2m_max'].shift(-1) # Using one of the location OHE cols for grouping
df['t2m_max_3_days_later'] = df.groupby('location_Chattanooga')['t2m_max'].shift(-3)
df['t2m_max_5_days_later'] = df.groupby('location_Chattanooga')['t2m_max'].shift(-5)

# Build feature columns list
feature_cols = [
    "date_ordinal",
    "day_of_year",
    "doy_sin",
    "doy_cos",
    "lat",          # Add latitude as a feature
    "lon",          # Add longitude as a feature
    "t2m",
    "t2m_min",
    "t2m_max",
    "t2m_range",
    "dewpoint",
    "rh2m",
    "ws10m",
    "wd10m",
    "ps",
    "allsky_sw_dwn",
    "allsky_lw_dwn",
    "prectotcorr"
]

# Add all one-hot encoded 'location_' columns to feature_cols
# This needs to be done dynamically after get_dummies
location_ohe_cols = [col for col in df.columns if col.startswith('location_')]
feature_cols.extend(location_ohe_cols)


target_cols = [
    "t2m_max_1_day_later",
    "t2m_max_3_days_later",
    "t2m_max_5_days_later"
]

# --- Handle NaNs from shifting the targets ---
# Drop rows with NaN in any of the new target columns.
original_rows = df.shape[0]
df.dropna(subset=target_cols, inplace=True)
print(f"Dropped {original_rows - df.shape[0]} rows due to NaNs from shifting targets.")

print("Features:", feature_cols)
print("Targets: ", target_cols)
df.tail()
```

## 3. Train/Test Split

```{python}
# 3a) Boolean masks
mask_train = (df["date"] >= train_start) & (df["date"] <= train_end)
mask_test  = (df["date"] >= test_start)  & (df["date"] <= test_end)

train_df = df[mask_train].reset_index(drop=True)
test_df  = df[mask_test].reset_index(drop=True)

print("Train rows:", train_df.shape[0])
print("Test rows: ", test_df.shape[0])
```

## 4. Train XGBoost Model

```{python}
from xgboost import XGBRegressor

models = {}
for target_col in target_cols:
    print(f"\nTraining model for: {target_col}")
    # 4a) Prepare arrays
    iX_train = train_df[feature_cols]
    iy_train = train_df[target_col]

    # 4b) Instantiate & fit
    model = XGBRegressor(
        n_estimators=100,
        learning_rate=0.1,
        random_state=0
    )
    model.fit(iX_train, iy_train)
    models[target_col] = model
    print(f"Model for {target_col} training complete.")

print("\nAll models trained.")
```

## 5. Forecast & Evaluate

```{python}
from sklearn.metrics import mean_squared_error, mean_absolute_error
import numpy as np

# We'll create a df_eval that potentially includes 'location' for analysis if needed,
# but for overall metrics, it's not strictly necessary.
# Let's keep it consistent with previous:
df_eval = pd.DataFrame({"date": test_df["date"]})
df_eval['location'] = test_df['location_Chattanooga'] # Using one of the OHE columns just for linking back, will make more general later

for target_col in target_cols:
    X_test = test_df[feature_cols]
    y_true = test_df[target_col]
    y_pred = models[target_col].predict(X_test)

    df_eval[f"y_true_{target_col}"] = y_true
    df_eval[f"y_pred_{target_col}"] = y_pred

    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    mae  = mean_absolute_error(y_true, y_pred)
    print(f"\nMetrics for {target_col}:")
    print(f"  RMSE: {rmse:.3f}, MAE: {mae:.3f}")

df_eval.head()
```

## 6. Plot Results

```{python}
import plotly.express as px
import pandas as pd

plot_df_list = []

# We need to explicitly filter for Chattanooga if we want to plot only its data
# as the original 'city' parameter is for the title now.
# Let's assume you want to plot Chattanooga's results.
# We'll use the one-hot encoded column to filter.
chattanooga_mask = df['location_Chattanooga'] == 1
df_chattanooga_actual = df[chattanooga_mask].copy()

# Add Actual (Today's Max) for comparison - this is the unshifted, raw t2m_max
plot_df_list.append(
    df_chattanooga_actual[["date", "t2m_max"]].assign(series="Actual (Today's Max)", type="Actual_Today")
    .rename(columns={"t2m_max": "temperature"}) # Standardize column name
)

# Filter test_df_eval for Chattanooga's data for plotting
# Need to reconstruct a test_df_eval for a specific city for plotting
test_df_chattanooga = test_df[test_df['location_Chattanooga'] == 1].reset_index(drop=True)

# Re-run prediction for the filtered test_df_chattanooga to get y_pred for plotting
# This is a bit inefficient but ensures we get the correct predictions for the plot
# Alternatively, we could filter df_eval but it would be more complex
temp_df_eval_chattanooga = pd.DataFrame({"date": test_df_chattanooga["date"]})

for target_col in target_cols:
    X_test_chattanooga = test_df_chattanooga[feature_cols]
    y_true_chattanooga = test_df_chattanooga[target_col]
    y_pred_chattanooga = models[target_col].predict(X_test_chattanooga) # Predict using the city-filtered X_test

    temp_df_eval_chattanooga[f"y_true_{target_col}"] = y_true_chattanooga
    temp_df_eval_chattanooga[f"y_pred_{target_col}"] = y_pred_chattanooga


# Process only the specific test actual and prediction series we want to plot
for target_col in target_cols:
    horizon_name = target_col.replace('t2m_max_', '').replace('_later', '')
    
    if horizon_name == "1 day": # Keep Test Actual for 1 day out
        plot_df_list.append(
            temp_df_eval_chattanooga[["date", f"y_true_{target_col}"]].assign(
                series=f"Test Actual ({horizon_name})",
                type=f"Test_Actual_{horizon_name}"
            ).rename(columns={f"y_true_{target_col}": "temperature"}) # Standardize column name
        )
    
    # Always include the Test Prediction for all horizons
    plot_df_list.append(
        temp_df_eval_chattanooga[["date", f"y_pred_{target_col}"]].assign(
            series=f"Test Pred ({horizon_name})",
            type=f"Test_Pred_{horizon_name}"
        ).rename(columns={f"y_pred_{target_col}": "temperature"}) # Standardize column name
    )

plot_df = pd.concat(plot_df_list, ignore_index=True)


# Define a more robust color scale and line dash map
# Base color for 1-day (darker), then progressively lighter for 3 and 5 days
base_blue_1 = "#007BFF" # Darker blue for 1-day
base_blue_3 = "#66B2FF" # Medium blue for 3-day
base_blue_5 = "#ADD8FF" # Lighter blue for 5-day

color_map = {
    "Actual (Today's Max)": "black",

    # 1-day forecast
    "Test Actual (1 day)": base_blue_1,
    "Test Pred (1 day)": "#3399FF", # Slightly lighter than base_blue_1

    # 3-day forecast
    "Test Pred (3 days)": "#99CCFF", # Slightly lighter than base_blue_3

    # 5-day forecast
    "Test Pred (5 days)": "#CCEEFF", # Slightly lighter than base_blue_5
}

line_dash_map = {
    "Actual (Today's Max)": "solid",
    "Test Actual (1 day)": "solid",
    "Test Pred (1 day)": "dot", # Predictions as dots
    "Test Pred (3 days)": "dot",
    "Test Pred (5 days)": "dot",
}

# The title now refers to multi-city training, but the plot is for 'Chattanooga'
fig = px.line(
    plot_df,
    x="date",
    y="temperature", # Use the standardized 'temperature' column
    color="series",
    title=f"XGBoost Baseline for {city} (Trained on Multiple Cities)", # Adjusted title
    template="plotly_white",
    color_discrete_map=color_map,
    line_dash_map=line_dash_map
)
fig.update_layout(height=600, xaxis_title="Date", yaxis_title="T2M max (°C)")
fig.show()
```


```{python}


# --- First Plot (Original) ---
plot_df_list_original = []

# Add Actual (Today's Max) for comparison
plot_df_list_original.append(
    df_chattanooga_actual[["date", "t2m_max"]].assign(series="Actual (Today's Max)", type="Actual_Today")
    .rename(columns={"t2m_max": "temperature"})
)

for target_col in target_cols:
    horizon_name = target_col.replace('t2m_max_', '').replace('_later', '')

    if horizon_name == "1 day":
        plot_df_list_original.append(
            temp_df_eval_chattanooga[["date", f"y_true_{target_col}"]].assign(
                series=f"Test Actual ({horizon_name})",
                type=f"Test_Actual_{horizon_name}"
            ).rename(columns={f"y_true_{target_col}": "temperature"})
        )

    plot_df_list_original.append(
        temp_df_eval_chattanooga[["date", f"y_pred_{target_col}"]].assign(
            series=f"Test Pred ({horizon_name})",
            type=f"Test_Pred_{horizon_name}"
        ).rename(columns={f"y_pred_{target_col}": "temperature"})
    )

plot_df_original = pd.concat(plot_df_list_original, ignore_index=True)

color_map_original = {
    "Actual (Today's Max)": "black",
    "Test Actual (1 day)": base_blue_1,
    "Test Pred (1 day)": "#3399FF",
    "Test Pred (3 days)": "#99CCFF",
    "Test Pred (5 days)": "#CCEEFF",
}

line_dash_map_original = {
    "Actual (Today's Max)": "solid",
    "Test Actual (1 day)": "solid",
    "Test Pred (1 day)": "dot",
    "Test Pred (3 days)": "dot",
    "Test Pred (5 days)": "dot",
}

fig_original = px.line(
    plot_df_original,
    x="date",
    y="temperature",
    color="series",
    title=f"XGBoost Baseline for {city} (Trained on Multiple Cities)",
    template="plotly_white",
    color_discrete_map=color_map_original,
    line_dash_map=line_dash_map_original
)
fig_original.update_layout(xaxis_title="Date", yaxis_title="T2M max (°C)")
fig_original.show()

# --- Second Plot (Shifted 1-Day Prediction) ---
plot_df_shifted = []

# Add Actual (Today's Max)
plot_df_shifted.append(
    df_chattanooga_actual[["date", "t2m_max"]].assign(series="Actual (Today's Max)")
    .rename(columns={"t2m_max": "temperature"})
)

# Add Test Actual (1 day)
plot_df_shifted.append(
    temp_df_eval_chattanooga[["date", "y_true_t2m_max_1_day_later"]].assign(series="Test Actual (1 day)")
    .rename(columns={"y_true_t2m_max_1_day_later": "temperature"})
)

# Add Shifted Test Pred (1 day)
test_pred_1day_shifted = temp_df_eval_chattanooga[["date", "y_pred_t2m_max_1_day_later"]].copy()
test_pred_1day_shifted['date'] = test_pred_1day_shifted['date'] + pd.Timedelta(days=1)
test_pred_1day_shifted['series'] = "Test Pred (1 day) - Shifted"
test_pred_1day_shifted = test_pred_1day_shifted.rename(columns={"y_pred_t2m_max_1_day_later": "temperature"})
plot_df_shifted.append(test_pred_1day_shifted)

plot_df_shifted = pd.concat(plot_df_shifted, ignore_index=True)

color_map_shifted = {
    "Actual (Today's Max)": "black",
    "Test Actual (1 day)": base_blue_1,
    "Test Pred (1 day) - Shifted": "red", # Use a distinct color for the shifted prediction
}

line_dash_map_shifted = {
    "Actual (Today's Max)": "solid",
    "Test Actual (1 day)": "solid",
    "Test Pred (1 day) - Shifted": "dash",
}

fig_shifted = px.line(
    plot_df_shifted,
    x="date",
    y="temperature",
    color="series",
    title=f"XGBoost 1-Day Forecast Accuracy for {city} (Shifted)",
    template="plotly_white",
    color_discrete_map=color_map_shifted,
    line_dash_map=line_dash_map_shifted
)
# THE FIX IS HERE: Ensure the string for yaxis_title is correctly terminated
fig_shifted.update_layout(xaxis_title="Date", yaxis_title="T2M max (°C)")
fig_shifted.show()
```